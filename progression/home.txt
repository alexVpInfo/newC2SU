documetation commencée le 27 février, après la photo de bureau

Ensuite la partie action concrètes, tout est dans le div .action Le texte (titre + paragraphe) est dans un sous-div actionTxt. margin-top de 2em avec ce qu'il y a avant
Comme précédemment: font Poppins , h1 en 2em weight 600, p en 1.35em weight 200. la barre séparant les deux et le contour bas du titre (solid 3px #9F3367) + padding-bottom de 1em
C2SU et les chiffres du p sont dans le span weight 600 et #9F3367 (le txt est en noir sinon)
J'ai mis un indent de 3.7em pour le texte pour aligner les textes en span, le texte a un line-heght de 1.8em pour espacer les lignes
le display en block, le width de 13em pour le h1 (avec padding de 2em en latéral comme à chaque fois) et 15em aussi pour le p; margin auto à chaque fois avec margin-top 1em pour l'écart
Pour l'image à côté voir pour la changer avec une plus belle  (width 30em height 23em), border-radius à 10px pour adoucir
margin-bottom de 12em pour espacer avec le prochain div

Pareil, même structure pour parler des VSS et de l'éducation: (div .lutte)
width de 14em pour h1 et 25em pour p. Le texte est cette fois-ci sur la droite, sur la gauche deux div pour les deux idées.
le div .lutteImg sert à mettre en forme les deux descriptions (il est en flex space-around et contient deux div: .sexes et .educ avec à chaque foi height 31em et width 18em) on lui met un margin-top de 2,5em pour qu'il soit aligné avec le texte
Les images ont un height de 12em, et un width de 12em pour l'educ et 14,5em pour sexes. pour centrer le div on le met en flex avec align-items: center.
Chacun de ces deux div contient des flèches "^", on les fait avec la lettre v tournée (transform: rotate(180deg) ) dans un élément label, puis on utilise la fonction stretch de font à 200%

On le met alors en #9F3367, avec un margin-top de 0.5em pour espacer, une largeur (width) de 1.05em.

On crée ensuite son animation, on commence par lui ajouter le curseur en pointer (illusion de bouton)
ensuite on crée les p qui contiennent le texte à faire apparaître, avec font-size à 0.9em et un width de 18em
on crée un checkbox hidden pour chaque div dont le label est la flèche, ainsi quand on appuie dessus on va changer (1seconde en tout):
-la position de la fleche (0->-12%) et on change sons sens avec transform rotate (durée de 1ms pour 999ms de retard)
-le p avec clip-path inset (0 0 100% 0) -> (0 0 0 0) et sa position de -5% à -15%
- l'image de 12em à em à chaque fois (width sexesImg de 14em à 6,04em)


Plus tard j'ai changé la flèche avec le code &#x276F; maintenant elle est en à 270deg en unchecked et 90deg en checked. 
On peut donc retirer le font-stretch, et mettre une font sans-serif en 4em, on passe le margin-top à 0.8em; et le width 1.05em devient height 1.33em et le mettre en top-5% (tout pour style de label). j'ai mis le cursor en n-resize quand on passe dessus (et s-resize quand il est déjà cliqué).

A la suite on va faire la partie contact sur la même structure (div général . contacter séparé en .contactTxt et .contactImg)
Le h1 du texte a un width de 7.7em et p on le met à 19em.
La partie Img contiendra tout en haut la mention "nos réseaux" avec en dessous de nouveau les mêmes liens que dans le footer des pages tools (en remplaçant X par le mail)
le div contact Img est en flex column space-around align-items: center, le texte reprend les caractéristiques habituelles donc en corrige en mettant width à 15em, pas d'indent, pas de margin et text-align: center. On lui met un margin-top: 2em.
Les images de réseaux sont en display block 4em×4em avec une bordure de 2px en #9F3367 solid et un radius très grand pour faire un cercle autour (j'ai mis 20em)
ils sont dans un bloc a pour servir de lien avec target="blank_" pour ouvrir dans une nouvelle fenêtre

Ensuite on remet un texte "Les mails du Bureau" en dessous duquel on va mettre un menu défilant avec tous les membres du bureau.
Sa strcture est un div en row qui contient un bouton gauche, un lien et un bouton droit. Les boutons sont faits avec les flèches &#x276F; (celle de gauche est rotate(180deg)). Ces boutons ont un fond rgb(200,200,200), pas de bordures, mais border-radius: 5px (on fait '0 0.7em 0.7em 0' à droite et à gauche comme il est retourné on fait la même; de cette manière les angles internes restent droits). 
pour la flèche on met button: font 1.5em , height 5em . Et cursor resize (e-resize à droite w-resize à gauche), en pratique j'ai d'abord défini button avec les propriétés de btnDroite, puis j'ai utilisé .btnGauche pour corriger ses spécificités. puis un button:active avec une opacité de 50%
  Pour le a qui va contenir le reste, on le met en flex row, avec la mention target blank_ et comme id linkMail. Il contient à gauche une image (id="imgVP"), puis un div (id="infoVP") qui est en flex column space-around et contient deux lignes: on place deux em (en css on enlèvera l'italic avec text-style: normal) le premier pour les noms (id="nomVP") et un deuxième avec le pôle (id="VP"). On définit le style d'em avec font: poppins 1.5em, text-align: center, width 13.2em, color black, font-weight 600. On adapte pour le nom: .nomVP {font-size 1.8em width 11em et color #9F3367}.
  l'image fait 7,3em×7,3em avec un margin gauche de 1em. Pour qu'elle soit ronde on met un border-radius très grand (20em).

Pour permettre ensuite le changement de personne dans le block lien/mail on va écrire le script js suivant:
let linkMail = document.getElementById("linkMail");
let img = document.getElementById("imgVP");
let nom = document.getElementById("nomVP");
let vp = document.getElementById("VP");
let btnGauche = document.getElementById("btnGauche");
let btnDroite = document.getElementById("btnDroite");
var i = 0;
update(i);

btnDroite.addEventListener("click", function() {
	i ++;
	if (i === 17) {
		i = 0;
	};
	update(i);
});

Puis on fait un équivalent pour le btnGauche pour faire baisser i (et qui revient aux max à -1)
La fonction update(i) va ensuite utiliser un switch avec 17 entrées pour chacun et change l'html pour:
- mettre l'alt de l'image au nom de la personne
- mettre la source de l'image au sous-dossier photosBureau de images, en choisissant le bon poste (avec VPwei1 et VPwei2 / VPsgs1 et VPsgs2 définis arbitrairements
- mettre le lien du bloc a au mailto: du poste en question
- mettre le textContent de nomVP au nom de la personne
- mettre le textContent VP au poste pour le BR et au pôle pour les VPs
  à la fin de chaque case du switch on met bien un break
Pour plus de structure, j'ai mis height div.menuDefilant à 8em, le a à 7.8em (-0.2em pour chaque bordure de 0.1em), les images à 7.5em×7.5em, avec un margin-top de 0.15em pour centrer

Pour le header, on le met en flex row space-between,
à gauche le logo (lien qui renvoie vers l'accueil) en format 7em×7em et margin-left 5em | margin-top 1em
à droite on met un div (.link) qui contient les liens suivants (en flex row space-around, items center, width 50% margin-top: 1em):
- Accueil (renvoie vers home.php) 
-La corporation (renvoie vers corpo.php)
-Les pôles (renvoie vers poles.php)
-Nos sites (js qui va afficher un menu)
Ces txt sont en Poppins black 1.3em font-weight 400. On met padding 0.5em, margin-bottom 0, cursor pointer dessus. ET text-align: center. 
On rajoute la classe .page à la page concernée (ici Accueil).
On crée un div (.under) pour chaque titre qui va servir de soulignement. Il est en height 0.15em, background #9F3367, et width 0 initialement, mais une transition le fera passer à 100% quand :hover, en 0.5s ease. On met .page +.under en width 100%
On remplace en fait pour la partie "sites" le p par label avec l'attribut for="sites", puis on créer un input checkBox avec l'id correspondante (caché). Son div .under doit alors contenir 'style="position: relative; top: 0.5em"'. Ainsi quand on click sur ce checkbox (nommé .sites, donc quand sites:checked), on va faire apparaître un ul caché (passe de display none à display block). 
Donc ce ul a comme position absolute top 6em et right 1em. Il contient 6 li. Le premier est tools, que l'on met dans le span déjà établi. Les 5 autres corrspondent aux sites contenus: wei, vote, roneos, fiches et mindmaps. On lui met: font Poppins 1.5em ; list-style-type none, text-align center, padding 0.3em, background-color white, border 0.01em rgb(200,200,200) solid. Avec une transition de la couleur à white et du fond à #9F3367 en 350ms (pour color on met aussi dans span du coup)
Et on crée li: hover en rajoutant span{color: white}.

Pour le footer, je mettrai les parts, et tout bas deux div:
-un premier avec 'COPYRIGHT © TOUS DROITS RÉSERVÉS', background #9F3367, color white, font Poppins, text-align center, width 100%, padding-top et -bottom 0.3em
- un deuxième avec 'Pôle Info - site par Alexandre FLAMENT', background black, color rgba(255,255,255,0.7) (blanc opacité 70%), font Poppins 0.7em, text-align center, width 100%, padding-top 0.2em et padding-bottom 0.4em

Plus tard j'ai fait en sorte sue l'input soit en dehord du div .aSites (ancien ..a) qui contient maintenant aussi le ul. On enlève le align-items center de .links qu'on remplace avec margin-top 3em. Pour .aSites, on met width 7.1em, display flex colum flex start, align-items start. Pour ul on met position relative avec right 50%. Et pour ul quand .sites:checked on rajoute z-index: 10.

Pour le lien vers le mail j'ai plus tard rajouté le mail en dessous. Pour ça on passe le div .menuDefilant à height: 10em. Puis on crée un div .divMail qui contient l'image et le txt précédent (le a passe donc à flex-direction: row et height 9.8em). Ce nouveau div fait 7.8em de haut et est en flex row. En dessou de ce div on met un cite (d'id 'mailVP') qui va contenir l'adresse mail à afficher , il lui done le style font-style normal; text-decoration underline; color #9F3367; font 'Poppins' 1.5em. Enfin on rajoute pour chaque membre dans le script: let mailVP=document.getElementById("mailVP"); . Puis dans update() on passe le textContent au mail en question.

Pour le logo corpo qui apparaît, on rajoute un lien vers la page corpo.php, mtn c'est donc le a qui fait l'animation et plus l'image.

On remplace idées défendues par engagment, avec donc un width de 17.8em au h1 de .lutte

Pour rendre la page plus responsive on met flex-wrap: wrap à .intro; wrap-reverse à .presentation; wrap à .action; wrap-reverse à .lutte; wrap à contact.

Pour rendre la page plus responsive j'ai mis:
html { font-size: clamp( 0.5em , 0.5vw + 0.5em , 1vw + 0.5 em) ; }
Pour l'image des pôles:
width: clamp( 35em , 50vw , 65em ) ; height: auto ;

Pour les images intéractives (VSS ety éducation pour tous) on met leur height à 30%, leur width à auto. Puis pour les div qui les entourent on met width à clamp(10vw, 20vw, 30vw) et height 40em. On met ces div (.sex et .educ toujours) en position relative à top: calc(10em-8vw);
Pour la transition, l'image finale dans les deux cas a un height de clamp(4vw,8vw,12vw) t un width auto. Mais j'ai enlevé le fait que la flèche changeait de direction d'un coup, à la place elle tourne au rythme de l'animation: 1ms 999ms devient simplement 1s.

J'ai rajouté un "voir plus" en dessous des flèches des engagements. c'est en h3, color #9F3367, position relative, top -8%. Il disparait quand le toggle est checked.

Pour rendre responsive à un tel:
@media screen and (max-width: 767px) and (orientation: portrait) {
	header { 
		flex-direction: row-reverse;
		justify-content: center;
		.links {
			width: 100%;
			margin-left: 1em;
		}
	}
	.logoHeader {
		width: 0;
		height: 0;
	}
	.intro {
		p {
			width: 90%;
			padding: 2em;
		}
	}
	.lutte {
		h1 {
			width: 60%;
		}
		p {
			width: 80%;
		}

	}
	.lutteImg {
		div {
			margin: 5em;
		}
		p {
			position: relative;
			right: 5em;
		}
	}
}

@media screen and (max-width: 1024px) and (min-width: 767px) {
	.lutteImg {
		width: 55%;
		position: ;
		left: 0%;
		display: flex;
		justify-content: flex-start;
	}
}

Afin de faciliter l'actualisation du site à chaque changement de bureau, j'ai créé le table 'Bureau' dans la DB 'users'. On y retrouve 17 lignes avec à chaque fois une id entre 0 et 16, le Prénom NOM de la personne, son poste, son mail de la corpo et le lien vers le dossier contenant sa photo.
On importe ensuite en php cette table en appelant d'abord le fichier 'manageUsers.php' avec include_once. on fait un appel sql avec prepare('SELECT * FROM users.Bureau'), on exécute et on crée $bureau=$bureauStatement->fetchAll();
On crée maintenant l'array correspondant avec js: const bureauArray=<?php echo json_encode($bureau);?>
De là, update(i) se simplifie énormément: à chaque fois on appelle simplement bureauArray[i]['propriété concernée'], pour le lien on fait 'mailto:'.concat(bureauArray[i]['mail'])
